import prisma from "../lib/prisma";

// üìã Interface TypeScript pour les donn√©es de cr√©ation visite
interface CreateVisitData {
  hiveId: number;
  visitActions: {
    [actionId: string]: string | number;  // Cl√© = ID action, Valeur = r√©sultat
  };
}

class VisitService {
  // üöÄ M√©thode principale : Cr√©er visite + toutes ses actions
  static async create(data: CreateVisitData) {
    const { hiveId, visitActions } = data;

    // üîÑ Transaction Prisma : Tout ou rien (atomicit√© garantie)
    return await prisma.$transaction(async (tx) => {
      
      // 1Ô∏è‚É£ √âTAPE 1 : Cr√©er la visite
      const visit = await tx.visit.create({
        data: {
          hiveId: hiveId,
          date: new Date(),  // Date/heure actuelle automatique
        },
      });

      // 2Ô∏è‚É£ √âTAPE 2 : Pr√©parer les actions pour cr√©ation en lot
      const visitActionsToCreate = Object.entries(visitActions).map(([actionId, value]) => ({
        visitId: visit.id,           // FK vers visite cr√©√©e
        actionId: parseInt(actionId), // ID action (string ‚Üí number)
        value: String(value),        // Valeur action (number|string ‚Üí string)
      }));

      // 3Ô∏è‚É£ √âTAPE 3 : Cr√©er toutes les VisitAction en une fois (performance)
      await tx.visitAction.createMany({
        data: visitActionsToCreate,
      });

      // 4Ô∏è‚É£ √âTAPE 4 : Retourner visite compl√®te avec actions pour confirmation
      const visitWithActions = await tx.visit.findUnique({
        where: { id: visit.id },
        include: {
          visitActions: {
            include: {
              action: true,  // Inclut d√©tails action pour debugging/confirmation
            },
          },
          hive: {
            select: { id: true, name: true }  // Infos ruche pour confirmation
          }
        },
      });

      return visitWithActions;
    });
  }

  // üìä M√©thode future : R√©cup√©rer toutes les visites d'une ruche
  static async findByHiveId(hiveId: number) {
    return await prisma.visit.findMany({
      where: { hiveId },
      include: {
        visitActions: {
          include: { action: true }
        }
      },
      orderBy: { date: 'desc' }  // Plus r√©centes en premier
    });
  }

  // üîç M√©thode future : R√©cup√©rer une visite sp√©cifique
  static async findById(id: number) {
    return await prisma.visit.findUnique({
      where: { id },
      include: {
        visitActions: {
          include: { action: true }
        },
        hive: {
          select: { id: true, name: true }
        }
      }
    });
  }

  static async findAllByHive(hiveId: number) {
    return await prisma.visit.findMany({
      where: { hiveId },
      include: {
        visitActions: {
          include: { action: true }
        }
      },
      orderBy: { date: 'desc' }  // Plus r√©centes en premier
    });
  }
}

export default VisitService;
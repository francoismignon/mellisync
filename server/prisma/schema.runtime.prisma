// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum HiveType {
  DADANT
  LANGSTROTH
  WARRE
  KENYAN
  VOIRNOT
}

enum FrameCount {
  FRAME_8
  FRAME_10
  FRAME_12
  FRAME_14
}

enum TranshumanceReason {
  ACQUISITION // Achat/Acquisition initiale
  HONEY_FLOW // Miellée
  WINTERING // Hivernage  
  POLLINATION // Pollinisation
  TREATMENT // Traitement
  MAINTENANCE // Maintenance
  OTHER // Autre
}

enum HiveStatus {
  ACTIVE // Ruche en production normale
  INACTIVE // Ruche temporairement inactive
}

//Table users
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relation
  apiaries Apiary[]

  role Role @relation(fields: [roleId], references: [id], onDelete: Restrict)

  //Nom de la table
  @@map("users")
}

//Table apiaries
model Apiary {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  latitude  Decimal? // Coordonnées GPS pour API météo Open-Meteo
  longitude Decimal? // Générées automatiquement via géocodage
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int

  //Relation
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiary_hives ApiaryHive[]

  @@map("apiaries")
}

//Table hive
model Hive {
  id            Int        @id @default(autoincrement())
  name          String
  type          HiveType   @default(DADANT)
  framecount    FrameCount @default(FRAME_10)
  color           String
  status          HiveStatus @default(ACTIVE)
  statusReason    String?    // Raison du dernier changement de statut
  statusChangedAt DateTime?  // Date du dernier changement de statut
  yearBuilt       String
  qrCodeDataUrl String?    // Data URL du QR code généré pour impression
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  //Relation
  apiary_hives ApiaryHive[]
  visits       Visit[]

  @@map("hives")
}

//Table de jointure apiary_hives
model ApiaryHive {
  id        Int                @id @default(autoincrement())
  apiaryId  Int
  hiveId    Int
  reason    TranshumanceReason @default(ACQUISITION)
  note      String?
  startDate DateTime           @default(now())
  endDate   DateTime?

  //Relation
  apiary Apiary @relation(fields: [apiaryId], references: [id], onDelete: Restrict)
  hive   Hive   @relation(fields: [hiveId], references: [id], onDelete: Restrict)

  @@map("apiary_hives")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  users User[]

  @@map("roles")
}

model Visit {
  id          Int      @id @default(autoincrement())
  hiveId      Int      // FK vers Hive
  date        DateTime @default(now())
  temperature Float?   // Température en °C au moment de la visite
  weather     String?  // Condition météo au moment de la visite

  //Relation
  hive         Hive          @relation(fields: [hiveId], references: [id], onDelete: Restrict)
  visitActions VisitAction[]

  @@map("visits")
}

model VisitAction {
  id       Int    @id @default(autoincrement())
  visitId  Int    // FK vers Visit
  actionId Int    // FK vers Action
  value    String // Valeur de l'action : "Oui", "15.5", etc.

  //Relation
  visit  Visit  @relation(fields: [visitId], references: [id], onDelete: Cascade)
  action Action @relation(fields: [actionId], references: [id], onDelete: Cascade)

  @@map("visit_action")
}

model Action {
  id            Int     @id @default(autoincrement())
  label         String  // "Confirmer présence de la reine"
  actionType    String  // "CYCLE", "INCREMENT"
  incrementStep Decimal? // Coefficient multiplicateur pour INCREMENT (NULL pour CYCLE)
  temperatureMin Int?    // Température minimum requise (°C)
  temperatureMax Int?    // Température maximum autorisée (°C)

  // Relations
  visitActions                VisitAction[]
  action_options              ActionOption[]
  action_periodes             ActionPeriode[]
  action_weather_restrictions ActionWeatherRestriction[]

  @@map("actions")
}

model Option {
  id    Int    @id @default(autoincrement())
  label String

  // Relations
  action_options ActionOption[]

  @@map("options")
}

model Periode {
  id    Int    @id @default(autoincrement())
  label String

  // Relations
  action_periodes ActionPeriode[]

  @@map("periodes")
}

model WeatherRestriction {
  id    Int    @id @default(autoincrement())
  label String

  // Relations
  action_weather_restrictions ActionWeatherRestriction[]

  @@map("weather_restrictions")
}

// Tables de jointure many-to-many
model ActionOption {
  actionId Int
  optionId Int

  // Relations
  action Action @relation(fields: [actionId], references: [id], onDelete: Cascade)
  option Option @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@id([actionId, optionId])
  @@map("action_option")
}

model ActionPeriode {
  actionId  Int
  periodeId Int

  // Relations
  action  Action  @relation(fields: [actionId], references: [id], onDelete: Cascade)
  periode Periode @relation(fields: [periodeId], references: [id], onDelete: Cascade)

  @@id([actionId, periodeId])
  @@map("action_periode")
}

model ActionWeatherRestriction {
  actionId             Int
  weatherRestrictionId Int

  // Relations
  action             Action             @relation(fields: [actionId], references: [id], onDelete: Cascade)
  weatherRestriction WeatherRestriction @relation(fields: [weatherRestrictionId], references: [id], onDelete: Cascade)

  @@id([actionId, weatherRestrictionId])
  @@map("action_weather_restriction")
}

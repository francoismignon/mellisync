  name: Build and Deploy to Production
  # Nom affiché dans l'onglet GitHub Actions

  on:
    push:
      branches: [ master ]
  # Déclenche le workflow uniquement sur push vers la branche master

  env:
    REGISTRY: docker.io
    # Registry DockerHub par défaut
    BACKEND_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/mellisync-backend
    # Nom de l'image backend avec ton username DockerHub
    FRONTEND_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/mellisync-frontend
    # Nom de l'image frontend avec ton username DockerHub

  jobs:
    test-backend:
      runs-on: ubuntu-latest
      # Lance ce job sur une machine Ubuntu

      services:
        postgres:
          image: postgres:15-alpine
          # Lance PostgreSQL en arrière-plan pour les tests
          env:
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: mellisync_test
            # Configuration de la DB de test
          # Vérifie que PostgreSQL est prêt avant de continuer
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
          ports:
            - 5432:5432
            # Expose PostgreSQL sur localhost:5432

      steps:
      - uses: actions/checkout@v4
        # Récupère ton code source

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          # Installe Node.js 22 (comme ton environnement local)
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
          # Cache les dépendances npm pour aller plus vite

      - name: Install backend dependencies
        run: |
          cd server
          npm ci
        # Va dans le dossier server et installe les dépendances

      - name: Generate Prisma client (runtime only)
        run: |
          cd server
          npm run prisma:generate
        # Génère le client Prisma pour TypeScript (sans ERD pour éviter crash Puppeteer)

      - name: Run backend tests
        run: |
          cd server
          npm test
        # Lance les tests backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mellisync_test
          # URL de connexion à la DB de test

    build-and-deploy:
      needs: test-backend
      # Ce job attend que test-backend réussisse
      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v4
        # Récupère le code source

      - name: Setup Node.js for TypeScript build
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
        # Configure Node.js pour la compilation TypeScript

      - name: Build TypeScript backend
        run: |
          cd server
          npm ci
          npm run prisma:generate
          npm run build
        # Compile TypeScript en JavaScript pour production

      - name: Generate ERD (dev/docs only)
        if: ${{ vars.GENERATE_ERD == 'true' }}
        run: |
          cd server
          npm ci
          npm run prisma:erd
        # Génère l'ERD uniquement si GENERATE_ERD=true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # Se connecte à DockerHub avec tes secrets GitHub

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # Configure Docker pour les builds avancés

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          # Build depuis le dossier server/
          push: true
          # Push l'image sur DockerHub
          tags: ${{ env.BACKEND_IMAGE_NAME }}:latest,${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}
          # Tag avec "latest" et l'ID du commit
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Utilise le cache GitHub pour accélérer les builds

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          # Build depuis le dossier client/
          push: true
          tags: ${{ env.FRONTEND_IMAGE_NAME }}:latest,${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
          # Même logique que le backend

      - name: Deploy notification
        run: |
          echo "Deployment successful!"
          echo "Backend: ${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}"
          echo "Frontend: ${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}"
        # Affiche un message de succès avec les noms des images
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_SSH_PORT }}
          script: |
            cd /home/docker/mellisync
            echo "Pulling latest images..."
            docker compose -f docker-compose.prod.yml --env-file .env.prod pull
            echo "Running Prisma migrations..."
            docker compose -f docker-compose.prod.yml --env-file .env.prod run --rm backend npx prisma migrate deploy
            echo "Running database seed..."
            docker compose -f docker-compose.prod.yml --env-file .env.prod run --rm backend npm run seed
            echo "Restarting services..."
            docker compose -f docker-compose.prod.yml --env-file .env.prod up -d
            echo "Cleaning up old images..."
            docker system prune -f
            echo "Deployment completed!"